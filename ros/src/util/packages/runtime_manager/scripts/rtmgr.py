#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.6.8 on Mon Mar  2 21:28:36 2015
#

import wx

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MyFrame(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyFrame.__init__
		kwds["style"] = wx.DEFAULT_FRAME_STYLE
		wx.Frame.__init__(self, *args, **kwds)
		self.notebook_1 = wx.Notebook(self, wx.ID_ANY, style=0)
		self.notebook_1_pane_1 = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.bitmap_tablet = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.label_9 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Tablet UI"))
		self.button_tablet = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Active"))
		self.bitmap_mobile = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.label_9_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Mobile UI"))
		self.button_mobile = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Active"))
		self.bitmap_vehicle = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.label_9_copy_1 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Vehicle Control"))
		self.button_vehicle = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Active"))
		self.bitmap_database = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.label_9_copy_2 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Database Access"))
		self.button_database = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Active"))
		self.sizer_50_staticbox = wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, _("Network Connection"))
		self.button_statchk_d = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("D"))
		self.button_statchk_r = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("R"))
		self.button_statchk_b = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("B"))
		self.button_statchk_n = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("N"))
		self.button_statchk_prog = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Program"))
		self.button_statchk_manu = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Manual"))
		self.label_12 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Indicator"))
		self.button_statchk_indi_l = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("L"))
		self.button_statchk_indi_r = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("R"))
		self.panel_main_cc = wx.Panel(self.notebook_1_pane_1, wx.ID_ANY)
		self.sizer_65_staticbox = wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, _("Control Check"))
		self.label_16 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Route to:"))
		self.text_ctrl_route_to_lat = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.text_ctrl_route_to_lon = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.label_17 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Route from:"))
		self.text_ctrl_route_from_lat = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.text_ctrl_route_from_lon = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.text_ctrl_point_cloud = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.button_ref_point_cloud = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Ref"))
		self.text_ctrl_vector_map = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.button_ref_vector_map = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Ref"))
		self.text_ctrl_area_list = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "")
		self.button_ref_area_list = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Ref"))
		self.button_read_navi = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Read Navi"))
		self.button_load_map = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("Map"))
		self.checkbox_auto_update = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("Auto Update"))
		self.checkbox_auto_ignore_db = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("Ignore DB"))
		self.sizer_55_staticbox = wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, _("Route and Map"))
		self.text_ctrl_main_tf = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_ref_main_tf = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Ref"))
		self.button_main_tf = wx.ToggleButton(self.notebook_1_pane_1, wx.ID_ANY, _("TF"))
		self.text_ctrl_main_rosbag_play = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_ref_main_rosbag_play = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Ref"))
		self.button_launch_main_rosbag_play = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Play"))
		self.button_kill_main_rosbag_play = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Stop"))
		self.button_pause_main_rosbag_play = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Pause"))
		self.label_4_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Rate"))
		self.text_ctrl_rate_main_rosbag_play = wx.TextCtrl(self.notebook_1_pane_1, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.checkbox_clock_main_rosbag_play = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("Clock"))
		self.checkbox_main_sim_time = wx.CheckBox(self.notebook_1_pane_1, wx.ID_ANY, _("Simulation Time"))
		self.sizer_19_staticbox = wx.StaticBox(self.notebook_1_pane_1, wx.ID_ANY, _("ROS"))
		self.button_init = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Init"))
		self.button_check = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Check"))
		self.button_set = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Set"))
		self.button_drive = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Drive"))
		self.button_pause = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Pause"))
		self.button_stop = wx.Button(self.notebook_1_pane_1, wx.ID_ANY, _("Stop"))
		self.bitmap_1 = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.bitmap_2 = wx.StaticBitmap(self.notebook_1_pane_1, wx.ID_ANY, wx.NullBitmap)
		self.notebook_1_pane_2 = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.notebook_1_pane_3 = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.tree_ctrl_0 = wx.TreeCtrl(self.notebook_1_pane_3, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
		self.tree_ctrl_1 = wx.TreeCtrl(self.notebook_1_pane_3, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
		self.tree_ctrl_2 = wx.TreeCtrl(self.notebook_1_pane_3, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
		self.button_refresh = wx.Button(self.notebook_1_pane_3, wx.ID_ANY, _("Refresh"))
		self.notebook_1_pane_4 = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.tree_ctrl_data = wx.TreeCtrl(self.notebook_1_pane_4, wx.ID_ANY, style=wx.TR_HAS_BUTTONS | wx.TR_NO_LINES | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)
		self.button_refresh_data = wx.Button(self.notebook_1_pane_4, wx.ID_ANY, _("Refresh"))
		self.text_ctrl_query = wx.TextCtrl(self.notebook_1_pane_4, wx.ID_ANY, _("sentence"))
		self.button_query = wx.Button(self.notebook_1_pane_4, wx.ID_ANY, _("Query"))
		self.list_ctrl_sql = wx.ListCtrl(self.notebook_1_pane_4, wx.ID_ANY, style=wx.LC_REPORT | wx.SUNKEN_BORDER)
		self.notebook_1_pane_5 = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.panel_sensing = wx.ScrolledWindow(self.notebook_1_pane_5, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.checkbox_auto_probe = wx.CheckBox(self.notebook_1_pane_5, wx.ID_ANY, _("Auto Probe"))
		self.button_probe = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Probe"))
		self.button_calibration = wx.ToggleButton(self.notebook_1_pane_5, wx.ID_ANY, _("Calibration"))
		self.button_launch_rosbag_record = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("ROSBAG Record"))
		self.sizer_45_staticbox = wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "")
		self.text_ctrl_tf = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_ref_tf = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Ref"))
		self.button_launch_tf = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("TF"))
		self.button_kill_tf = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Kill"))
		self.sizer_25_staticbox = wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "")
		self.text_ctrl_sensor_fusion = wx.TextCtrl(self.notebook_1_pane_5, wx.ID_ANY, "")
		self.button_ref_sensor_fusion = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Ref"))
		self.button_launch_sensor_fusion = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Sensor Fusion"))
		self.button_kill_sensor_fusion = wx.Button(self.notebook_1_pane_5, wx.ID_ANY, _("Kill"))
		self.sizer_25_copy_staticbox = wx.StaticBox(self.notebook_1_pane_5, wx.ID_ANY, "")
		self.tab_simulation = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.panel_simulation = wx.ScrolledWindow(self.tab_simulation, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.checkbox_point_map_update = wx.CheckBox(self.tab_simulation, wx.ID_ANY, _("Point Map Update"))
		self.panel_3 = wx.ScrolledWindow(self.tab_simulation, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.text_ctrl_rosbag_play = wx.TextCtrl(self.panel_3, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.button_ref_rosbag_play = wx.Button(self.panel_3, wx.ID_ANY, _("Ref"))
		self.button_launch_rosbag_play = wx.Button(self.panel_3, wx.ID_ANY, _("ROSBAG Play"))
		self.button_kill_rosbag_play = wx.Button(self.panel_3, wx.ID_ANY, _("Kill"))
		self.button_pause_rosbag_play = wx.Button(self.panel_3, wx.ID_ANY, _("Pause"))
		self.label_4 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Rate"))
		self.text_ctrl_rate_rosbag_play = wx.TextCtrl(self.panel_3, wx.ID_ANY, "", style=wx.TE_PROCESS_ENTER)
		self.checkbox_clock_rosbag_play = wx.CheckBox(self.panel_3, wx.ID_ANY, _("Clock"))
		self.checkbox_sim_time = wx.CheckBox(self.panel_3, wx.ID_ANY, _("Simulation Time"))
		self.sizer_25_copy_copy_staticbox = wx.StaticBox(self.panel_3, wx.ID_ANY, "")
		self.text_ctrl_pmap = wx.TextCtrl(self.panel_3, wx.ID_ANY, "")
		self.button_ref_pmap = wx.Button(self.panel_3, wx.ID_ANY, _("Ref"))
		self.button_launch_pmap = wx.Button(self.panel_3, wx.ID_ANY, _("Point Map"))
		self.button_kill_pmap = wx.Button(self.panel_3, wx.ID_ANY, _("Kill"))
		self.sizer_25_copy_copy_copy_staticbox = wx.StaticBox(self.panel_3, wx.ID_ANY, "")
		self.text_ctrl_vmap = wx.TextCtrl(self.panel_3, wx.ID_ANY, "")
		self.button_ref_vmap = wx.Button(self.panel_3, wx.ID_ANY, _("Ref"))
		self.button_launch_vmap = wx.Button(self.panel_3, wx.ID_ANY, _("Vector Map"))
		self.button_kill_vmap = wx.Button(self.panel_3, wx.ID_ANY, _("Kill"))
		self.sizer_25_copy_copy_copy_copy_staticbox = wx.StaticBox(self.panel_3, wx.ID_ANY, "")
		self.text_ctrl_trajectory = wx.TextCtrl(self.panel_3, wx.ID_ANY, "")
		self.button_ref_trajectory = wx.Button(self.panel_3, wx.ID_ANY, _("Ref"))
		self.button_launch_trajectory = wx.Button(self.panel_3, wx.ID_ANY, _("Trajectory"))
		self.button_kill_trajectory = wx.Button(self.panel_3, wx.ID_ANY, _("Kill"))
		self.sizer_25_copy_copy_copy_copy_copy_copy_staticbox = wx.StaticBox(self.panel_3, wx.ID_ANY, "")
		self.tab_viewer = wx.Panel(self.notebook_1, wx.ID_ANY)
		self.panel_viewer = wx.ScrolledWindow(self.tab_viewer, wx.ID_ANY, style=wx.TAB_TRAVERSAL)

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnNetConn, self.button_tablet)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnNetConn, self.button_mobile)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnNetConn, self.button_vehicle)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnNetConn, self.button_database)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnGear, self.button_statchk_d)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnGear, self.button_statchk_r)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnGear, self.button_statchk_b)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnGear, self.button_statchk_n)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnProgManu, self.button_statchk_prog)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnProgManu, self.button_statchk_manu)
		self.Bind(wx.EVT_BUTTON, self.OnIndi, self.button_statchk_indi_l)
		self.Bind(wx.EVT_BUTTON, self.OnIndi, self.button_statchk_indi_r)
		self.Bind(wx.EVT_TEXT, self.OnTextRoute, self.text_ctrl_route_to_lat)
		self.Bind(wx.EVT_TEXT, self.OnTextRoute, self.text_ctrl_route_to_lon)
		self.Bind(wx.EVT_TEXT, self.OnTextRoute, self.text_ctrl_route_from_lat)
		self.Bind(wx.EVT_TEXT, self.OnTextRoute, self.text_ctrl_route_from_lon)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_point_cloud)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_vector_map)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_area_list)
		self.Bind(wx.EVT_BUTTON, self.OnReadNavi, self.button_read_navi)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnLoadMap, self.button_load_map)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_main_tf)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_main_tf)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnMainTf, self.button_main_tf)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_main_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_main_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_main_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_main_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnPauseRosbagPlay, self.button_pause_main_rosbag_play)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_rate_main_rosbag_play)
		self.Bind(wx.EVT_CHECKBOX, self.OnAliasSync, self.checkbox_clock_main_rosbag_play)
		self.Bind(wx.EVT_CHECKBOX, self.OnSimTime, self.checkbox_main_sim_time)
		self.Bind(wx.EVT_BUTTON, self.OnMainButton, self.button_init)
		self.Bind(wx.EVT_BUTTON, self.OnMainButton, self.button_check)
		self.Bind(wx.EVT_BUTTON, self.OnMainButton, self.button_set)
		self.Bind(wx.EVT_BUTTON, self.OnDrive, self.button_drive)
		self.Bind(wx.EVT_BUTTON, self.OnPause, self.button_pause)
		self.Bind(wx.EVT_BUTTON, self.OnStop, self.button_stop)
		self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.button_refresh)
		self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.button_refresh_data)
		self.Bind(wx.EVT_BUTTON, self.OnQuery, self.button_query)
		self.Bind(wx.EVT_CHECKBOX, self.OnAutoProbe, self.checkbox_auto_probe)
		self.Bind(wx.EVT_BUTTON, self.OnProbe, self.button_probe)
		self.Bind(wx.EVT_TOGGLEBUTTON, self.OnCalib, self.button_calibration)
		self.Bind(wx.EVT_BUTTON, self.OnRosbagRecord, self.button_launch_rosbag_record)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_tf)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_tf)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_tf)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_tf)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_sensor_fusion)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_sensor_fusion)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_sensor_fusion)
		self.Bind(wx.EVT_CHECKBOX, self.OnPointMapUpdate, self.checkbox_point_map_update)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_rosbag_play)
		self.Bind(wx.EVT_BUTTON, self.OnPauseRosbagPlay, self.button_pause_rosbag_play)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnAliasSync, self.text_ctrl_rate_rosbag_play)
		self.Bind(wx.EVT_CHECKBOX, self.OnAliasSync, self.checkbox_clock_rosbag_play)
		self.Bind(wx.EVT_CHECKBOX, self.OnSimTime, self.checkbox_sim_time)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_pmap)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_pmap)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_pmap)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_vmap)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_vmap)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_vmap)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_trajectory)
		self.Bind(wx.EVT_BUTTON, self.OnLaunch, self.button_launch_trajectory)
		self.Bind(wx.EVT_BUTTON, self.OnKill, self.button_kill_trajectory)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyFrame.__set_properties
		self.SetTitle(_("runtime manager"))
		self.button_tablet.SetMinSize((60, 29))
		self.button_mobile.SetMinSize((60, 29))
		self.button_vehicle.SetMinSize((60, 29))
		self.button_database.SetMinSize((60, 29))
		self.button_statchk_d.SetMinSize((29, 29))
		self.button_statchk_r.SetMinSize((29, 29))
		self.button_statchk_b.SetMinSize((29, 29))
		self.button_statchk_b.SetValue(1)
		self.button_statchk_n.SetMinSize((29, 29))
		self.button_statchk_manu.SetValue(1)
		self.button_statchk_indi_l.SetMinSize((40, 29))
		self.button_statchk_indi_r.SetMinSize((40, 29))
		self.text_ctrl_point_cloud.SetMinSize((250, 27))
		self.button_ref_point_cloud.SetMinSize((40, 29))
		self.text_ctrl_vector_map.SetMinSize((250, 27))
		self.button_ref_vector_map.SetMinSize((40, 29))
		self.text_ctrl_area_list.SetMinSize((250, 27))
		self.button_ref_area_list.SetMinSize((40, 29))
		self.text_ctrl_main_tf.SetMinSize((250, 27))
		self.button_ref_main_tf.SetMinSize((40, 29))
		self.text_ctrl_main_rosbag_play.SetMinSize((250, 27))
		self.button_ref_main_rosbag_play.SetMinSize((40, 29))
		self.button_launch_main_rosbag_play.SetMinSize((50, 29))
		self.button_kill_main_rosbag_play.SetMinSize((50, 29))
		self.button_kill_main_rosbag_play.Enable(False)
		self.button_pause_main_rosbag_play.SetMinSize((50, 29))
		self.button_pause_main_rosbag_play.Enable(False)
		self.panel_sensing.SetScrollRate(10, 10)
		self.checkbox_auto_probe.Hide()
		self.button_ref_tf.SetMinSize((40, 29))
		self.button_kill_tf.SetMinSize((40, 29))
		self.button_kill_tf.Enable(False)
		self.button_ref_sensor_fusion.SetMinSize((40, 29))
		self.button_kill_sensor_fusion.SetMinSize((40, 29))
		self.button_kill_sensor_fusion.Enable(False)
		self.panel_simulation.SetScrollRate(10, 10)
		self.button_ref_rosbag_play.SetMinSize((40, 29))
		self.button_kill_rosbag_play.SetMinSize((40, 29))
		self.button_kill_rosbag_play.Enable(False)
		self.button_pause_rosbag_play.SetMinSize((60, 29))
		self.button_pause_rosbag_play.Enable(False)
		self.checkbox_clock_rosbag_play.SetForegroundColour(wx.Colour(76, 76, 76))
		self.button_ref_pmap.SetMinSize((40, 29))
		self.button_kill_pmap.SetMinSize((40, 29))
		self.button_kill_pmap.Enable(False)
		self.button_ref_vmap.SetMinSize((40, 29))
		self.button_kill_vmap.SetMinSize((40, 29))
		self.button_kill_vmap.Enable(False)
		self.button_ref_trajectory.SetMinSize((40, 29))
		self.button_kill_trajectory.SetMinSize((40, 29))
		self.button_kill_trajectory.Enable(False)
		self.panel_3.SetMinSize((250, -1))
		self.panel_3.SetScrollRate(10, 10)
		self.panel_viewer.SetMinSize((366, 390))
		self.panel_viewer.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyFrame.__do_layout
		self.sizer_1 = wx.BoxSizer(wx.VERTICAL)
		sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_viewer = wx.BoxSizer(wx.VERTICAL)
		sizer_5_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7_copy = wx.BoxSizer(wx.VERTICAL)
		self.sizer_25_copy_copy_copy_copy_copy_copy_staticbox.Lower()
		sizer_25_copy_copy_copy_copy_copy_copy = wx.StaticBoxSizer(self.sizer_25_copy_copy_copy_copy_copy_copy_staticbox, wx.VERTICAL)
		sizer_8_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_25_copy_copy_copy_copy_staticbox.Lower()
		sizer_25_copy_copy_copy_copy = wx.StaticBoxSizer(self.sizer_25_copy_copy_copy_copy_staticbox, wx.VERTICAL)
		sizer_8_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_25_copy_copy_copy_staticbox.Lower()
		sizer_25_copy_copy_copy = wx.StaticBoxSizer(self.sizer_25_copy_copy_copy_staticbox, wx.VERTICAL)
		sizer_8_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_25_copy_copy_staticbox.Lower()
		sizer_25_copy_copy = wx.StaticBoxSizer(self.sizer_25_copy_copy_staticbox, wx.VERTICAL)
		sizer_8_copy_2 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_8_copy_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_9 = wx.BoxSizer(wx.VERTICAL)
		sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_7 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_25_copy_staticbox.Lower()
		sizer_25_copy = wx.StaticBoxSizer(self.sizer_25_copy_staticbox, wx.VERTICAL)
		sizer_8_copy_1_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_25_staticbox.Lower()
		sizer_25 = wx.StaticBoxSizer(self.sizer_25_staticbox, wx.VERTICAL)
		sizer_8_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_45_staticbox.Lower()
		sizer_45 = wx.StaticBoxSizer(self.sizer_45_staticbox, wx.VERTICAL)
		sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_17 = wx.BoxSizer(wx.VERTICAL)
		sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_12 = wx.BoxSizer(wx.VERTICAL)
		sizer_10 = wx.BoxSizer(wx.VERTICAL)
		sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_4 = wx.BoxSizer(wx.VERTICAL)
		sizer_43 = wx.BoxSizer(wx.VERTICAL)
		sizer_47 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_59 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_58_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_58 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_19_staticbox.Lower()
		sizer_19 = wx.StaticBoxSizer(self.sizer_19_staticbox, wx.VERTICAL)
		sizer_8_copy_3_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_22 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_29 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_23_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_23 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_55_staticbox.Lower()
		sizer_55 = wx.StaticBoxSizer(self.sizer_55_staticbox, wx.HORIZONTAL)
		sizer_56 = wx.BoxSizer(wx.VERTICAL)
		sizer_57 = wx.BoxSizer(wx.VERTICAL)
		grid_sizer_3 = wx.FlexGridSizer(3, 3, 0, 0)
		sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_46 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_65_staticbox.Lower()
		sizer_65 = wx.StaticBoxSizer(self.sizer_65_staticbox, wx.HORIZONTAL)
		sizer_67 = wx.BoxSizer(wx.VERTICAL)
		sizer_54 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_66 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_50_staticbox.Lower()
		sizer_50 = wx.StaticBoxSizer(self.sizer_50_staticbox, wx.HORIZONTAL)
		grid_sizer_1 = wx.FlexGridSizer(4, 3, 4, 4)
		grid_sizer_1.Add(self.bitmap_tablet, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.label_9, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.button_tablet, 0, 0, 0)
		grid_sizer_1.Add(self.bitmap_mobile, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.label_9_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.button_mobile, 0, 0, 0)
		grid_sizer_1.Add(self.bitmap_vehicle, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.label_9_copy_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.button_vehicle, 0, 0, 0)
		grid_sizer_1.Add(self.bitmap_database, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.label_9_copy_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_1.Add(self.button_database, 0, 0, 0)
		sizer_50.Add(grid_sizer_1, 0, wx.EXPAND, 0)
		sizer_46.Add(sizer_50, 0, wx.ALL | wx.EXPAND, 4)
		sizer_66.Add(self.button_statchk_d, 1, wx.EXPAND, 0)
		sizer_66.Add(self.button_statchk_r, 1, wx.EXPAND, 0)
		sizer_66.Add(self.button_statchk_b, 1, wx.EXPAND, 0)
		sizer_66.Add(self.button_statchk_n, 1, wx.EXPAND, 0)
		sizer_65.Add(sizer_66, 0, wx.ALL, 4)
		sizer_67.Add(self.button_statchk_prog, 0, 0, 0)
		sizer_67.Add(self.button_statchk_manu, 0, 0, 0)
		sizer_67.Add(self.label_12, 0, wx.TOP | wx.ALIGN_CENTER_VERTICAL, 10)
		sizer_54.Add(self.button_statchk_indi_l, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_54.Add(self.button_statchk_indi_r, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_67.Add(sizer_54, 0, wx.EXPAND, 0)
		sizer_65.Add(sizer_67, 0, wx.ALL | wx.EXPAND, 4)
		sizer_65.Add(self.panel_main_cc, 1, wx.EXPAND, 0)
		sizer_46.Add(sizer_65, 1, wx.ALL | wx.EXPAND, 4)
		sizer_43.Add(sizer_46, 0, wx.EXPAND, 0)
		sizer_16.Add(self.label_16, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.text_ctrl_route_to_lat, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.text_ctrl_route_to_lon, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.label_17, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_16.Add(self.text_ctrl_route_from_lat, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_16.Add(self.text_ctrl_route_from_lon, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_57.Add(sizer_16, 1, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		label_10 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Point Cloud:"))
		grid_sizer_3.Add(label_10, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_3.Add(self.text_ctrl_point_cloud, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_3.Add(self.button_ref_point_cloud, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		label_10_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Vector Map:"))
		grid_sizer_3.Add(label_10_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_3.Add(self.text_ctrl_vector_map, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_3.Add(self.button_ref_vector_map, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		label_10_copy_1 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Area List:"))
		grid_sizer_3.Add(label_10_copy_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		grid_sizer_3.Add(self.text_ctrl_area_list, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		grid_sizer_3.Add(self.button_ref_area_list, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_57.Add(grid_sizer_3, 0, wx.EXPAND, 0)
		sizer_55.Add(sizer_57, 1, wx.EXPAND, 0)
		sizer_56.Add(self.button_read_navi, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_56.Add(self.button_load_map, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_56.Add(self.checkbox_auto_update, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_56.Add(self.checkbox_auto_ignore_db, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_55.Add(sizer_56, 0, wx.LEFT | wx.EXPAND, 4)
		sizer_43.Add(sizer_55, 1, wx.ALL | wx.EXPAND, 4)
		label_10_copy_2 = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("Transform:"))
		sizer_23.Add(label_10_copy_2, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_23.Add(self.text_ctrl_main_tf, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_23.Add(self.button_ref_main_tf, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_20.Add(sizer_23, 1, wx.EXPAND, 0)
		sizer_20.Add(self.button_main_tf, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_19.Add(sizer_20, 0, wx.EXPAND, 0)
		label_10_copy_2_copy = wx.StaticText(self.notebook_1_pane_1, wx.ID_ANY, _("ROSBAG:"))
		sizer_23_copy.Add(label_10_copy_2_copy, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_23_copy.Add(self.text_ctrl_main_rosbag_play, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_23_copy.Add(self.button_ref_main_rosbag_play, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_22.Add(sizer_23_copy, 1, wx.EXPAND, 0)
		sizer_29.Add(self.button_launch_main_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_29.Add(self.button_kill_main_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_29.Add(self.button_pause_main_rosbag_play, 0, wx.ALIGN_CENTER_VERTICAL, 0)
		sizer_22.Add(sizer_29, 0, wx.EXPAND, 0)
		sizer_19.Add(sizer_22, 0, wx.EXPAND, 0)
		sizer_8_copy_3_copy.Add(self.label_4_copy, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_8_copy_3_copy.Add(self.text_ctrl_rate_main_rosbag_play, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_8_copy_3_copy.Add(self.checkbox_clock_main_rosbag_play, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_8_copy_3_copy.Add(self.checkbox_main_sim_time, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_19.Add(sizer_8_copy_3_copy, 0, wx.EXPAND, 0)
		sizer_43.Add(sizer_19, 0, wx.ALL | wx.EXPAND, 4)
		sizer_58.Add(self.button_init, 0, wx.EXPAND, 0)
		sizer_58.Add(self.button_check, 0, wx.EXPAND, 0)
		sizer_58.Add(self.button_set, 0, wx.EXPAND, 0)
		sizer_58.Add(self.button_drive, 0, wx.EXPAND, 0)
		sizer_47.Add(sizer_58, 0, wx.EXPAND, 0)
		sizer_47.Add((20, 20), 1, 0, 0)
		sizer_58_copy.Add(self.button_pause, 0, wx.EXPAND, 0)
		sizer_58_copy.Add(self.button_stop, 0, wx.EXPAND, 0)
		sizer_47.Add(sizer_58_copy, 0, wx.EXPAND, 0)
		sizer_59.Add(self.bitmap_1, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 20)
		sizer_59.Add(self.bitmap_2, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 20)
		sizer_47.Add(sizer_59, 0, 0, 0)
		sizer_43.Add(sizer_47, 0, wx.ALL | wx.EXPAND, 4)
		self.notebook_1_pane_1.SetSizer(sizer_43)
		self.notebook_1_pane_2.SetSizer(sizer_4)
		sizer_27.Add(self.tree_ctrl_0, 1, wx.EXPAND, 0)
		sizer_27.Add(self.tree_ctrl_1, 1, wx.EXPAND, 0)
		sizer_27.Add(self.tree_ctrl_2, 1, wx.EXPAND, 0)
		sizer_10.Add(sizer_27, 1, wx.EXPAND, 0)
		sizer_10.Add(self.button_refresh, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL, 4)
		self.notebook_1_pane_3.SetSizer(sizer_10)
		sizer_12.Add(self.tree_ctrl_data, 1, wx.EXPAND, 0)
		sizer_12.Add(self.button_refresh_data, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL, 4)
		sizer_11.Add(sizer_12, 1, wx.EXPAND, 0)
		sizer_18.Add(self.text_ctrl_query, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_18.Add(self.button_query, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_17.Add(sizer_18, 0, wx.EXPAND, 0)
		sizer_17.Add(self.list_ctrl_sql, 1, wx.ALL | wx.EXPAND, 4)
		sizer_17.Add((85, 29), 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL, 4)
		sizer_11.Add(sizer_17, 1, wx.EXPAND, 0)
		self.notebook_1_pane_4.SetSizer(sizer_11)
		sizer_5.Add(self.panel_sensing, 1, wx.EXPAND, 0)
		sizer_24.Add(self.checkbox_auto_probe, 0, wx.LEFT | wx.TOP | wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 4)
		sizer_24.Add(self.button_probe, 0, wx.LEFT | wx.TOP | wx.BOTTOM | wx.ALIGN_CENTER_HORIZONTAL, 4)
		sizer_24.Add(self.button_calibration, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL, 4)
		sizer_45.Add(sizer_24, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 0)
		sizer_45.Add(self.button_launch_rosbag_record, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_7.Add(sizer_45, 0, wx.ALL | wx.EXPAND, 4)
		sizer_28.Add(self.text_ctrl_tf, 1, wx.LEFT | wx.TOP, 4)
		sizer_28.Add(self.button_ref_tf, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25.Add(sizer_28, 1, wx.EXPAND, 0)
		sizer_8_copy_1.Add(self.button_launch_tf, 0, wx.ALL, 4)
		sizer_8_copy_1.Add(self.button_kill_tf, 0, wx.ALL, 4)
		sizer_25.Add(sizer_8_copy_1, 1, wx.EXPAND, 0)
		sizer_7.Add(sizer_25, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 4)
		sizer_28_copy.Add(self.text_ctrl_sensor_fusion, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy.Add(self.button_ref_sensor_fusion, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25_copy.Add(sizer_28_copy, 1, wx.EXPAND, 0)
		sizer_8_copy_1_copy.Add(self.button_launch_sensor_fusion, 0, wx.ALL, 4)
		sizer_8_copy_1_copy.Add(self.button_kill_sensor_fusion, 0, wx.ALL, 4)
		sizer_25_copy.Add(sizer_8_copy_1_copy, 1, wx.EXPAND, 0)
		sizer_7.Add(sizer_25_copy, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 4)
		sizer_5.Add(sizer_7, 0, wx.LEFT | wx.EXPAND, 4)
		self.notebook_1_pane_5.SetSizer(sizer_5)
		sizer_9.Add(self.panel_simulation, 1, wx.EXPAND, 0)
		sizer_9.Add(self.checkbox_point_map_update, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		sizer_5_copy.Add(sizer_9, 1, wx.EXPAND, 0)
		sizer_28_copy_copy.Add(self.text_ctrl_rosbag_play, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_copy.Add(self.button_ref_rosbag_play, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25_copy_copy.Add(sizer_28_copy_copy, 0, wx.EXPAND, 0)
		sizer_8.Add(self.button_launch_rosbag_play, 0, wx.ALL, 4)
		sizer_8.Add(self.button_kill_rosbag_play, 0, wx.ALL, 4)
		sizer_8.Add(self.button_pause_rosbag_play, 0, wx.ALL, 4)
		sizer_25_copy_copy.Add(sizer_8, 0, wx.EXPAND, 0)
		sizer_8_copy_3.Add(self.label_4, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_8_copy_3.Add(self.text_ctrl_rate_rosbag_play, 0, wx.LEFT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_25_copy_copy.Add(sizer_8_copy_3, 0, wx.EXPAND, 0)
		sizer_8_copy_2.Add(self.checkbox_clock_rosbag_play, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_8_copy_2.Add(self.checkbox_sim_time, 0, wx.LEFT | wx.RIGHT | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_25_copy_copy.Add(sizer_8_copy_2, 0, wx.EXPAND, 0)
		sizer_7_copy.Add(sizer_25_copy_copy, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 4)
		sizer_28_copy_copy_copy.Add(self.text_ctrl_pmap, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_copy_copy.Add(self.button_ref_pmap, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25_copy_copy_copy.Add(sizer_28_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_8_copy.Add(self.button_launch_pmap, 0, wx.ALL, 4)
		sizer_8_copy.Add(self.button_kill_pmap, 0, wx.ALL, 4)
		sizer_25_copy_copy_copy.Add(sizer_8_copy, 0, wx.EXPAND, 0)
		sizer_7_copy.Add(sizer_25_copy_copy_copy, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 4)
		sizer_28_copy_copy_copy_copy.Add(self.text_ctrl_vmap, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_copy_copy_copy.Add(self.button_ref_vmap, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25_copy_copy_copy_copy.Add(sizer_28_copy_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_8_copy_copy.Add(self.button_launch_vmap, 0, wx.ALL, 4)
		sizer_8_copy_copy.Add(self.button_kill_vmap, 0, wx.ALL, 4)
		sizer_25_copy_copy_copy_copy.Add(sizer_8_copy_copy, 0, wx.EXPAND, 0)
		sizer_7_copy.Add(sizer_25_copy_copy_copy_copy, 0, wx.LEFT | wx.RIGHT | wx.TOP | wx.EXPAND, 4)
		sizer_28_copy_copy_copy_copy_copy_copy.Add(self.text_ctrl_trajectory, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_copy_copy_copy_copy_copy.Add(self.button_ref_trajectory, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_25_copy_copy_copy_copy_copy_copy.Add(sizer_28_copy_copy_copy_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_8_copy_copy_copy.Add(self.button_launch_trajectory, 0, wx.ALL, 4)
		sizer_8_copy_copy_copy.Add(self.button_kill_trajectory, 0, wx.ALL, 4)
		sizer_25_copy_copy_copy_copy_copy_copy.Add(sizer_8_copy_copy_copy, 0, wx.EXPAND, 0)
		sizer_7_copy.Add(sizer_25_copy_copy_copy_copy_copy_copy, 0, wx.ALL | wx.EXPAND, 4)
		self.panel_3.SetSizer(sizer_7_copy)
		sizer_5_copy.Add(self.panel_3, 0, wx.EXPAND, 0)
		self.tab_simulation.SetSizer(sizer_5_copy)
		self.panel_viewer.SetSizer(self.sizer_viewer)
		sizer_26.Add(self.panel_viewer, 1, wx.EXPAND, 0)
		sizer_26.Add((20, 20), 1, 0, 0)
		self.tab_viewer.SetSizer(sizer_26)
		self.notebook_1.AddPage(self.notebook_1_pane_1, _("Main"))
		self.notebook_1.AddPage(self.notebook_1_pane_2, _("Actuation"))
		self.notebook_1.AddPage(self.notebook_1_pane_3, _("Computing"))
		self.notebook_1.AddPage(self.notebook_1_pane_4, _("Data"))
		self.notebook_1.AddPage(self.notebook_1_pane_5, _("Sensing"))
		self.notebook_1.AddPage(self.tab_simulation, _("Simulation"))
		self.notebook_1.AddPage(self.tab_viewer, _("Viewer"))
		self.sizer_1.Add(self.notebook_1, 1, wx.EXPAND, 0)
		self.SetSizer(self.sizer_1)
		self.sizer_1.Fit(self)
		self.Layout()
		# end wxGlade

	def OnNetConn(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnNetConn' not implemented!"
		event.Skip()

	def OnGear(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnGear' not implemented!"
		event.Skip()

	def OnProgManu(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnProgManu' not implemented!"
		event.Skip()

	def OnIndi(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnIndi' not implemented!"
		event.Skip()

	def OnTextRoute(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnTextRoute' not implemented!"
		event.Skip()

	def OnRef(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnReadNavi(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnReadNavi' not implemented!"
		event.Skip()

	def OnLoadMap(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnLoadMap' not implemented!"
		event.Skip()

	def OnAliasSync(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnAliasSync' not implemented!"
		event.Skip()

	def OnMainTf(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnMainTf' not implemented!"
		event.Skip()

	def OnLaunch(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnLaunch' not implemented!"
		event.Skip()

	def OnKill(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnKill' not implemented!"
		event.Skip()

	def OnPauseRosbagPlay(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnPauseRosbagPlay' not implemented!"
		event.Skip()

	def OnSimTime(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnSimTime' not implemented!"
		event.Skip()

	def OnMainButton(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnMainButton' not implemented!"
		event.Skip()

	def OnDrive(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnDrive' not implemented!"
		event.Skip()

	def OnPause(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnPause' not implemented!"
		event.Skip()

	def OnStop(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnStop' not implemented!"
		event.Skip()

	def OnRefresh(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnRefresh' not implemented!"
		event.Skip()

	def OnQuery(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnQuery' not implemented!"
		event.Skip()

	def OnAutoProbe(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnAutoProbe' not implemented!"
		event.Skip()

	def OnProbe(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnProbe' not implemented!"
		event.Skip()

	def OnCalib(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnCalib' not implemented!"
		event.Skip()

	def OnRosbagRecord(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnRosbagRecord' not implemented!"
		event.Skip()

	def OnPointMapUpdate(self, event):  # wxGlade: MyFrame.<event_handler>
		print "Event handler 'OnPointMapUpdate' not implemented!"
		event.Skip()

# end of class MyFrame

class MyDialog(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialog.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_2 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.radio_box = wx.RadioBox(self.panel_2, wx.ID_ANY, "", choices=[_("0"), _("1"), _("2"), _("3")], majorDimension=0, style=wx.RA_SPECIFY_ROWS)
		self.button_1 = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_1_copy = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_1_copy)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialog.__set_properties
		self.SetSize((258, 212))
		self.radio_box.SetSelection(0)
		self.panel_2.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialog.__do_layout
		sizer_13 = wx.BoxSizer(wx.VERTICAL)
		sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_14 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_14.Add(self.radio_box, 1, wx.LEFT | wx.RIGHT | wx.TOP | wx.ALIGN_CENTER_HORIZONTAL, 4)
		self.panel_2.SetSizer(sizer_14)
		sizer_13.Add(self.panel_2, 1, wx.EXPAND, 0)
		sizer_15.Add(self.button_1, 0, wx.ALL, 4)
		sizer_15.Add(self.button_1_copy, 0, wx.ALL, 4)
		sizer_13.Add(sizer_15, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_13)
		self.Layout()
		# end wxGlade

	def OnOk(self, event):  # wxGlade: MyDialog.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialog.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialog

class MyDialogPath(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogPath.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref_rosbag_simu = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.button_1 = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_1_copy = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_rosbag_simu)
		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_1_copy)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogPath.__set_properties
		self.SetTitle(_("dialog_2"))
		self.SetSize((482, 145))
		self.button_ref_rosbag_simu.SetMinSize((40, 29))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogPath.__do_layout
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_copy.Add(self.text_ctrl, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_28_copy_copy.Add(self.button_ref_rosbag_simu, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_30.Add(sizer_28_copy_copy, 1, wx.EXPAND, 0)
		sizer_31.Add(self.button_1, 0, wx.ALL, 4)
		sizer_31.Add(self.button_1_copy, 0, wx.ALL, 4)
		sizer_30.Add(sizer_31, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_30)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogPath.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnOk(self, event):  # wxGlade: MyDialogPath.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialogPath.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialogPath

class MyDialogParam(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogParam.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.panel_v = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.button_1 = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_1_copy = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_1)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_1_copy)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogParam.__set_properties
		self.SetTitle(_("dialog_3"))
		self.SetSize((470, 246))
		self.panel_v.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogParam.__do_layout
		sizer_30 = wx.BoxSizer(wx.VERTICAL)
		sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
		self.sizer_v = wx.BoxSizer(wx.VERTICAL)
		self.panel_v.SetSizer(self.sizer_v)
		sizer_30.Add(self.panel_v, 1, wx.EXPAND, 0)
		sizer_31.Add(self.button_1, 0, wx.ALL, 4)
		sizer_31.Add(self.button_1_copy, 0, wx.ALL, 4)
		sizer_30.Add(sizer_31, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_30)
		self.Layout()
		# end wxGlade

	def OnOk(self, event):  # wxGlade: MyDialogParam.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialogParam.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialogParam

class MyDialogRosbagRecord(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogRosbagRecord.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.text_ctrl = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.button_start = wx.Button(self, wx.ID_ANY, _("Start"))
		self.button_stop = wx.Button(self, wx.ID_ANY, _("Stop"))
		self.panel_1 = wx.ScrolledWindow(self, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
		self.button_refresh = wx.Button(self, wx.ID_ANY, _("Refresh"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref)
		self.Bind(wx.EVT_BUTTON, self.OnStart, self.button_start)
		self.Bind(wx.EVT_BUTTON, self.OnStop, self.button_stop)
		self.Bind(wx.EVT_BUTTON, self.OnRefresh, self.button_refresh)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogRosbagRecord.__set_properties
		self.SetTitle(_("ROSBAG Record"))
		self.SetSize((300, 430))
		self.button_ref.SetMinSize((40, 29))
		self.panel_1.SetScrollRate(10, 10)
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogRosbagRecord.__do_layout
		sizer_41 = wx.BoxSizer(wx.VERTICAL)
		self.sizer_topic = wx.BoxSizer(wx.VERTICAL)
		sizer_44 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_28_copy_1.Add(self.text_ctrl, 1, wx.LEFT | wx.TOP, 4)
		sizer_28_copy_1.Add(self.button_ref, 0, wx.LEFT | wx.RIGHT | wx.TOP, 4)
		sizer_41.Add(sizer_28_copy_1, 0, wx.EXPAND, 0)
		sizer_44.Add(self.button_start, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_44.Add(self.button_stop, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_41.Add(sizer_44, 0, wx.EXPAND, 0)
		self.panel_1.SetSizer(self.sizer_topic)
		sizer_41.Add(self.panel_1, 1, wx.EXPAND, 0)
		sizer_41.Add(self.button_refresh, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		self.SetSizer(sizer_41)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogRosbagRecord.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnStart(self, event):  # wxGlade: MyDialogRosbagRecord.<event_handler>
		print "Event handler 'OnStart' not implemented!"
		event.Skip()

	def OnStop(self, event):  # wxGlade: MyDialogRosbagRecord.<event_handler>
		print "Event handler 'OnStop' not implemented!"
		event.Skip()

	def OnRefresh(self, event):  # wxGlade: MyDialogRosbagRecord.<event_handler>
		print "Event handler 'OnRefresh' not implemented!"
		event.Skip()

# end of class MyDialogRosbagRecord

class MyDialogLaneNavi(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogLaneNavi.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.label_vector_map_lane_navi = wx.StaticText(self, wx.ID_ANY, _("Vector Map:"))
		self.text_ctrl_vector_map_lane_navi = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref_vector_map_lane_navi = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.button_ok_lane_navi = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_cancel_lane_navi = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_vector_map_lane_navi)
		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_ok_lane_navi)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_cancel_lane_navi)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogLaneNavi.__set_properties
		self.SetTitle(_("dialog_5"))
		self.SetSize((482, 145))
		self.button_ref_vector_map_lane_navi.SetMinSize((40, 29))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogLaneNavi.__do_layout
		sizer_2 = wx.BoxSizer(wx.VERTICAL)
		sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_3.Add(self.label_vector_map_lane_navi, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3.Add(self.text_ctrl_vector_map_lane_navi, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_3.Add(self.button_ref_vector_map_lane_navi, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_2.Add(sizer_3, 1, wx.EXPAND, 0)
		sizer_6.Add(self.button_ok_lane_navi, 0, wx.ALL, 4)
		sizer_6.Add(self.button_cancel_lane_navi, 0, wx.ALL, 4)
		sizer_2.Add(sizer_6, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_2)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogLaneNavi.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnOk(self, event):  # wxGlade: MyDialogLaneNavi.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialogLaneNavi.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialogLaneNavi

class MyDialogLaneRule(wx.Dialog):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MyDialogLaneRule.__init__
		kwds["style"] = wx.DEFAULT_DIALOG_STYLE
		wx.Dialog.__init__(self, *args, **kwds)
		self.label_vector_map_lane_rule = wx.StaticText(self, wx.ID_ANY, _("Vector Map:"))
		self.text_ctrl_vector_map_lane_rule = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref_vector_map_lane_rule = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.label_ruled_waypoint_lane_rule = wx.StaticText(self, wx.ID_ANY, _("Ruled Waypoint:"))
		self.text_ctrl_ruled_waypoint_lane_rule = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ref_ruled_waypoint_lane_rule = wx.Button(self, wx.ID_ANY, _("Ref"))
		self.label_velocity_lane_rule = wx.StaticText(self, wx.ID_ANY, _("Velocity"))
		self.slider_velocity_lane_rule = wx.Slider(self, wx.ID_ANY, 0, 0, 200)
		self.text_ctrl_velocity_lane_rule = wx.TextCtrl(self, wx.ID_ANY, "")
		self.label_difference_around_signal_lane_rule = wx.StaticText(self, wx.ID_ANY, _("Difference around Signal"))
		self.slider_difference_around_signal_lane_rule = wx.Slider(self, wx.ID_ANY, 0, 0, 20)
		self.text_ctrl_difference_around_signal_lane_rule = wx.TextCtrl(self, wx.ID_ANY, "")
		self.button_ok_lane_rule = wx.Button(self, wx.ID_ANY, _("OK"))
		self.button_cancel_lane_rule = wx.Button(self, wx.ID_ANY, _("Cancel"))

		self.__set_properties()
		self.__do_layout()

		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_vector_map_lane_rule)
		self.Bind(wx.EVT_BUTTON, self.OnRef, self.button_ref_ruled_waypoint_lane_rule)
		self.Bind(wx.EVT_COMMAND_SCROLL, self.OnScVelocity, self.slider_velocity_lane_rule)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextVelocity, self.text_ctrl_velocity_lane_rule)
		self.Bind(wx.EVT_COMMAND_SCROLL, self.OnScDifferenceAroundSignal, self.slider_difference_around_signal_lane_rule)
		self.Bind(wx.EVT_TEXT_ENTER, self.OnTextDifferenceAroundSignal, self.text_ctrl_difference_around_signal_lane_rule)
		self.Bind(wx.EVT_BUTTON, self.OnOk, self.button_ok_lane_rule)
		self.Bind(wx.EVT_BUTTON, self.OnCancel, self.button_cancel_lane_rule)
		# end wxGlade

	def __set_properties(self):
		# begin wxGlade: MyDialogLaneRule.__set_properties
		self.SetTitle(_("dialog_6"))
		self.SetSize((482, 217))
		self.button_ref_vector_map_lane_rule.SetMinSize((40, 29))
		self.button_ref_ruled_waypoint_lane_rule.SetMinSize((40, 29))
		# end wxGlade

	def __do_layout(self):
		# begin wxGlade: MyDialogLaneRule.__do_layout
		sizer_21 = wx.BoxSizer(wx.VERTICAL)
		sizer_61 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_60 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_49 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_63 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_62 = wx.BoxSizer(wx.HORIZONTAL)
		sizer_62.Add(self.label_vector_map_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_62.Add(self.text_ctrl_vector_map_lane_rule, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_62.Add(self.button_ref_vector_map_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_21.Add(sizer_62, 1, wx.EXPAND, 0)
		sizer_63.Add(self.label_ruled_waypoint_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_63.Add(self.text_ctrl_ruled_waypoint_lane_rule, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_63.Add(self.button_ref_ruled_waypoint_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_21.Add(sizer_63, 1, wx.EXPAND, 0)
		sizer_49.Add(self.label_velocity_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_49.Add(self.slider_velocity_lane_rule, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_49.Add(self.text_ctrl_velocity_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_21.Add(sizer_49, 0, wx.EXPAND, 0)
		sizer_60.Add(self.label_difference_around_signal_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_60.Add(self.slider_difference_around_signal_lane_rule, 1, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_60.Add(self.text_ctrl_difference_around_signal_lane_rule, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 4)
		sizer_21.Add(sizer_60, 0, wx.EXPAND, 0)
		sizer_61.Add(self.button_ok_lane_rule, 0, wx.ALL, 4)
		sizer_61.Add(self.button_cancel_lane_rule, 0, wx.ALL, 4)
		sizer_21.Add(sizer_61, 0, wx.ALIGN_CENTER_HORIZONTAL, 0)
		self.SetSizer(sizer_21)
		self.Layout()
		# end wxGlade

	def OnRef(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnRef' not implemented!"
		event.Skip()

	def OnScVelocity(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnScVelocity' not implemented!"
		event.Skip()

	def OnTextVelocity(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnTextVelocity' not implemented!"
		event.Skip()

	def OnScDifferenceAroundSignal(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnScDifferenceAroundSignal' not implemented!"
		event.Skip()

	def OnTextDifferenceAroundSignal(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnTextDifferenceAroundSignal' not implemented!"
		event.Skip()

	def OnOk(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnOk' not implemented!"
		event.Skip()

	def OnCancel(self, event):  # wxGlade: MyDialogLaneRule.<event_handler>
		print "Event handler 'OnCancel' not implemented!"
		event.Skip()

# end of class MyDialogLaneRule
class MyApp(wx.App):
	def OnInit(self):
		wx.InitAllImageHandlers()
		frame_1 = MyFrame(None, wx.ID_ANY, "")
		self.SetTopWindow(frame_1)
		frame_1.Show()
		return 1

# end of class MyApp

if __name__ == "__main__":
	gettext.install("app") # replace with the appropriate catalog name

	app = MyApp(0)
	app.MainLoop()